// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles not receiving a videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving a single invalid value for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving an invalid value in an array for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="valid-video-file.webm"
      />
      <source
        src="valid-video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a string for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a valid object for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of objects for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
        type="video/webm"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of strings for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array with a mix of strings and objects for the videoSrc prop 1`] = `
<div>
  <div
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      crossorigin="anonymous"
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.avi"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;
