// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`videoCaptions prop Handles invalid videoCaptions prop values correctly correctly handles receiving a single invalid value for the videoCaptions prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles invalid videoCaptions prop values correctly correctly handles receiving an invalid value in an array for the videoCaptions prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
      <track
        kind="captions"
        label="French"
        src="/fake/captions-file-fr.vtt"
        srclang="fr"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles valid videoCaptions prop values correctly correctly handles receiving a string for the videoCaptions prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.mp4"
      />
      <track
        kind="captions"
        src="/fake/captions-file.vtt"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles valid videoCaptions prop values correctly correctly handles receiving a valid object for the videoCaptions prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles valid videoCaptions prop values correctly correctly handles receiving an array of objects for the videoCaptions prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
      <track
        kind="captions"
        label="French"
        src="/fake/captions-file-fr.vtt"
        srclang="fr"
      />
      <track
        kind="captions"
        label="German"
        src="/fake/captions-file-de.vtt"
        srclang="de"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles not receiving a videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving a single invalid value for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving an invalid value in an array for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="valid-video-file.webm"
      />
      <source
        src="valid-video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a string for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a valid object for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of objects for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.webm"
        type="video/webm"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of strings for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array with a mix of strings and objects for the videoSrc prop 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.avi"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;
