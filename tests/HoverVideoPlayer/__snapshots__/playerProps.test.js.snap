// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Video props isVideoMuted prop correctly sets muted attribute on video 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video props shouldVideoLoop prop correctly sets loop attribute on video 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`isFocused isFocused prop starts and stops the video correctly 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`isFocused other events which would normally stop the video are ignored if isFocused prop is true 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`overlayFadeTransitionDuration Stop attempts stop immediately if a pausedOverlay is not provided 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`overlayFadeTransitionDuration Stop attempts take the amount of time set by overlayFadeTransitionDuration prop if a pausedOverlay is provided 1`] = `
.emotion-2 {
  position: relative;
}

.emotion-0 {
  position: relative;
  display: block;
  width: 100%;
  z-index: 1;
  pointer-events: none;
}

.emotion-0 > * {
  display: block;
  width: 100%;
}

.emotion-1 {
  width: 100%;
  display: block;
  object-fit: cover;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

<div>
  <div
    class="emotion-2"
    data-testid="hover-video-player-container"
  >
    <div
      class="emotion-0"
      data-testid="paused-overlay-wrapper"
      style="opacity: 1; transition: opacity 900ms;"
    >
      <div />
    </div>
    <video
      class="emotion-1"
      loop=""
      playsinline=""
      preload="none"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`pausedOverlay and loadingOverlay pausedOverlay and loadingOverlay are shown and hidden correctly as the video is started and stopped 1`] = `
.emotion-3 {
  position: relative;
}

.emotion-0 {
  position: relative;
  display: block;
  width: 100%;
  z-index: 1;
  pointer-events: none;
}

.emotion-0 > * {
  display: block;
  width: 100%;
}

.emotion-1 {
  z-index: 2;
  pointer-events: none;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

.emotion-2 {
  width: 100%;
  display: block;
  object-fit: cover;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

<div>
  <div
    class="emotion-3"
    data-testid="hover-video-player-container"
  >
    <div
      class="emotion-0"
      data-testid="paused-overlay-wrapper"
      style="opacity: 1; transition: opacity 500ms;"
    >
      <div />
    </div>
    <div
      class="emotion-1"
      data-testid="loading-overlay-wrapper"
      style="opacity: 0; transition: opacity 500ms;"
    >
      <div />
    </div>
    <video
      class="emotion-2"
      loop=""
      playsinline=""
      preload="none"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`pausedOverlay and loadingOverlay the loading state overlay is not shown if the video plays before the loading state timeout completes 1`] = `
.emotion-2 {
  position: relative;
}

.emotion-1 {
  width: 100%;
  display: block;
  object-fit: cover;
}

.emotion-0 {
  z-index: 2;
  pointer-events: none;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

<div>
  <div
    class="emotion-2"
    data-testid="hover-video-player-container"
  >
    <div
      class="emotion-0"
      data-testid="loading-overlay-wrapper"
      style="opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class="emotion-1"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`shouldRestartOnVideoStopped shouldRestartOnVideoStopped prop does not restart the video when set to false 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`shouldRestartOnVideoStopped shouldRestartOnVideoStopped prop restarts the video when set to true 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`shouldUseOverlayDimensions shouldUseOverlayDimensions prop applies the correct styling when set to false alongside a paused overlay 1`] = `
.emotion-2 {
  position: relative;
}

.emotion-1 {
  width: 100%;
  display: block;
  object-fit: cover;
}

.emotion-0 {
  position: relative;
  display: block;
  width: 100%;
  z-index: 1;
  pointer-events: none;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

.emotion-0 > * {
  display: block;
  width: 100%;
}

<div>
  <div
    class="emotion-2"
    data-testid="hover-video-player-container"
  >
    <div
      class="emotion-0"
      data-testid="paused-overlay-wrapper"
      style="opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class="emotion-1"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`shouldUseOverlayDimensions shouldUseOverlayDimensions prop applies the correct styling when set to true alongside a paused overlay 1`] = `
.emotion-2 {
  position: relative;
}

.emotion-0 {
  position: relative;
  display: block;
  width: 100%;
  z-index: 1;
  pointer-events: none;
}

.emotion-0 > * {
  display: block;
  width: 100%;
}

.emotion-1 {
  width: 100%;
  display: block;
  object-fit: cover;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%;
}

<div>
  <div
    class="emotion-2"
    data-testid="hover-video-player-container"
  >
    <div
      class="emotion-0"
      data-testid="paused-overlay-wrapper"
      style="opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class="emotion-1"
      loop=""
      playsinline=""
      preload="none"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`shouldUseOverlayDimensions shouldUseOverlayDimensions should be ignored and applies the correct styling when no paused overlay is provided 1`] = `
.emotion-1 {
  position: relative;
}

.emotion-0 {
  width: 100%;
  display: block;
  object-fit: cover;
}

<div>
  <div
    class="emotion-1"
    data-testid="hover-video-player-container"
  >
    <video
      class="emotion-0"
      loop=""
      playsinline=""
      preload="metadata"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;
