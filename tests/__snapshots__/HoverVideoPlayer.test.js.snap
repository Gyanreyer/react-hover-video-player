// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Follows video interaction flows correctly an attempt to pause the video when it is already paused will be ignored 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Follows video interaction flows correctly an attempt to play the video when a previous play attempt is still loading will show the loading state again 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Follows video interaction flows correctly an attempt to play the video when it is already playing will be ignored 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Follows video interaction flows correctly an attempt to play the video will correctly interrupt any attempts to pause it 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Follows video interaction flows correctly the video will be paused immediately when its play attempt completes after we have already stopped 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Handles interaction events correctly mouseEnter and mouseLeave events take the video through its play and pause flows correctly 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Handles interaction events correctly touch events take the video through its play and pause flows correctly 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Prevents memory leaks when unmounted cleans everything up correctly if the video is unmounted during a pause attempt 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Prevents memory leaks when unmounted cleans everything up correctly if the video is unmounted during a play attempt 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Supports browsers that do not return a promise from video.play() handles start flow correctly 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Supports browsers that do not return a promise from video.play() handles start flow correctly multiple times in a row 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video playback errors handles a video playback error correectly 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video playback errors handles playback errors correctly for browsers that do not support promises 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video props loop prop correctly sets loop attribute on video 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video props muted prop correctly sets muted attribute on video 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`Video props preload 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`disableDefaultEventHandling disableDefaultEventHandling prop disables all default event handling 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`focused focused prop starts and stops the video correctly 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`focused other events which would normally stop the video are ignored if focused prop is true 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`overlayTransitionDuration Stop attempts stop immediately if a pausedOverlay is not provided 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`overlayTransitionDuration Stop attempts take the amount of time set by overlayTransitionDuration prop if a pausedOverlay is provided 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 900ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`pausedOverlay and loadingOverlay pausedOverlay and loadingOverlay are shown and hidden correctly as the video is started and stopped 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 500ms;"
    >
      <div />
    </div>
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 500ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`pausedOverlay and loadingOverlay the loading state overlay is not shown if the video plays before the loading state timeout completes 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="loading-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 2; opacity: 0; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`restartOnPaused restartOnPaused prop does not restart the video when set to false 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`restartOnPaused restartOnPaused prop restarts the video when set to true 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`sizingMode sizingMode "container" sets correct styling on the player 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`sizingMode sizingMode "manual" sets correct styling on the player 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`sizingMode sizingMode "overlay" sets correct styling on the player 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: relative; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`sizingMode sizingMode "video" sets correct styling on the player 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <div
      class=""
      data-testid="paused-overlay-wrapper"
      style="position: absolute; width: 100%; height: 100%; top: 0px; bottom: 0px; left: 0px; right: 0px; z-index: 1; opacity: 1; transition: opacity 400ms;"
    >
      <div />
    </div>
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`unloadVideoOnPaused unloadVideoOnPaused prop unloads the video's sources while it is paused when set to true 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    />
  </div>
</div>
`;

exports[`videoCaptions prop Handles invalid videoCaptions prop values correctly correctly handles receiving a single invalid value for the videoCaptions prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles invalid videoCaptions prop values correctly correctly handles receiving an invalid value in an array for the videoCaptions prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
      <track
        kind="captions"
        label="French"
        src="/fake/captions-file-fr.vtt"
        srclang="fr"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles valid videoCaptions prop values correctly correctly handles receiving a valid object for the videoCaptions prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
    </video>
  </div>
</div>
`;

exports[`videoCaptions prop Handles valid videoCaptions prop values correctly correctly handles receiving an array of objects for the videoCaptions prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
      />
      <track
        kind="captions"
        label="English"
        src="/fake/captions-file-en.vtt"
        srclang="en"
      />
      <track
        kind="captions"
        label="French"
        src="/fake/captions-file-fr.vtt"
        srclang="fr"
      />
      <track
        kind="captions"
        label="German"
        src="/fake/captions-file-de.vtt"
        srclang="de"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles not receiving a videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving a single invalid value for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    />
  </div>
</div>
`;

exports[`videoSrc prop Handles invalid videoSrc prop values correctly correctly handles receiving an invalid value in an array for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="valid-video-file.webm"
      />
      <source
        src="valid-video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a string for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving a valid object for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of objects for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
        type="video/webm"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array of strings for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.mp4"
      />
    </video>
  </div>
</div>
`;

exports[`videoSrc prop Handles valid videoSrc prop values correctly correctly handles receiving an array with a mix of strings and objects for the videoSrc prop 1`] = `
<div>
  <div
    class=""
    data-testid="hover-video-player-container"
    style="position: relative;"
  >
    <video
      class=""
      data-testid="video-element"
      loop=""
      playsinline=""
      style="display: block; width: 100%; object-fit: cover;"
    >
      <source
        src="/fake/video-file.webm"
      />
      <source
        src="/fake/video-file.avi"
      />
      <source
        src="/fake/video-file.mp4"
        type="video/mp4"
      />
    </video>
  </div>
</div>
`;
